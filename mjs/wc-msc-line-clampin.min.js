import{_wcl}from"./common-lib.js";import{_wccss}from"./common-css.js";const defaults={},booleanAttrs=[],objectAttrs=[],custumEvents={expand:"msc-line-clampin-expand"},template=document.createElement("template");if(template.innerHTML=`
<style>
${_wccss}

:host{position:relative;display:block;}

.main {
  --line-clamp: var(--msc-line-clampin-line-clamp, 2);
  --padding-size: var(--msc-line-clampin-padding-size, 86px);
  --button-color: var(--msc-line-clampin-button-text-color, rgba(52 120 246));
  --button-text: var(--msc-line-clampin-button-text, 'more');
  
  --button-display: block;
  --mask:
      linear-gradient(to top, black 0%, black 0%) 100% 100% / 100% 100% no-repeat exclude,
      linear-gradient(to left, black 50%, transparent 100%) 100% 100% / var(--padding-size) 1lh no-repeat exclude;

  position: relative;
  font-size: inherit;
  line-height: inherit;
  outline: 0 none;

  &.main--expand {
    --line-clamp: none;
    --button-display: none;
    --mask: none;
  }

  .main__slot {
    font-size: inherit;
    inline-size: 100%;
    line-height: inherit;

    /* line-clamp */
    display: -webkit-box;
    -webkit-line-clamp: var(--line-clamp);
    -webkit-box-orient: vertical;
    text-overflow: ellipsis;
    overflow: hidden;

    /* mask */
    mask: var(--mask);
  }

  .main__button {
    font-size: inherit;
    line-height: inherit;
    color: var(--button-color);
    display: var(--button-display);

    appearance: none;
    background: transparent;
    border: 0 none;
    outline: 0 none;
    margin: 0;
    padding: 0;

    position: absolute;
    inset-inline-end: 0;
    inset-block-end: 0;
    cursor: pointer;

    &::before {
      content: var(--button-text);
    }
  }
}
</style>

<div class="main" ontouchstart="" tabindex="0">
  <slot class="main__slot"></slot>
  <button
    type="button"
    class="main__button"
  >
  </button>
</div>
`,CSS?.registerProperty)try{CSS.registerProperty({name:"--msc-line-clampin-line-clamp",syntax:"<integer>",inherits:!0,initialValue:"2"}),CSS.registerProperty({name:"--msc-line-clampin-padding-size",syntax:"<length>",inherits:!0,initialValue:"86px"}),CSS.registerProperty({name:"--msc-line-clampin-button-text-color",syntax:"<color>",inherits:!0,initialValue:"rgba(52 120 246)"})}catch(t){console.warn("msc-line-clampin: "+t.message)}class MscLineClampin extends HTMLElement{#data;#nodes;#config;constructor(t){super(),this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(template.content.cloneNode(!0)),this.#data={controller:""},this.#nodes={main:this.shadowRoot.querySelector(".main"),button:this.shadowRoot.querySelector(".main__button")},this.#config={...defaults,...t},this._onClick=this._onClick.bind(this)}async connectedCallback(){var{config:t,error:e}=await _wcl.getWCConfig(this);e?(console.warn(_wcl.classToTagName(this.constructor.name)+": "+e),this.remove()):(this.#config={...this.#config,...t},Object.keys(defaults).forEach(t=>this.#upgradeProperty(t)),this.#data.controller=new AbortController,e=this.#data.controller.signal,this.#nodes.button.addEventListener("click",this._onClick,{signal:e}))}disconnectedCallback(){this.#data?.controller&&this.#data.controller.abort()}static get observedAttributes(){return Object.keys(defaults)}static get supportedEvents(){return Object.keys(custumEvents).map(t=>custumEvents[t])}#upgradeProperty(t){let e;MscLineClampin.observedAttributes.includes(t)&&(Object.prototype.hasOwnProperty.call(this,t)?(e=this[t],delete this[t]):e=booleanAttrs.includes(t)?!(!this.hasAttribute(t)&&!this.#config[t]):objectAttrs.includes(t)?this.hasAttribute(t)?this.getAttribute(t):JSON.stringify(this.#config[t]):this.hasAttribute(t)?this.getAttribute(t):this.#config[t],this[t]=e)}#fireEvent(t,e){this.dispatchEvent(new CustomEvent(t,{bubbles:!0,composed:!0,...e&&{detail:e}}))}_onClick(){this.#nodes.main.classList.toggle("main--expand",!0),this.#fireEvent(custumEvents.expand)}}const S=_wcl.supports(),T=_wcl.classToTagName("MscLineClampin");S.customElements&&S.shadowDOM&&S.template&&!window.customElements.get(T)&&window.customElements.define(_wcl.classToTagName("MscLineClampin"),MscLineClampin);export{MscLineClampin};